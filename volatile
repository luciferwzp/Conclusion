访问寄存器比访问内存单元要快，编译器会优化减少内存的读取，可能会脏读数据，
声明变量为 volatile，编译器不会在对该变量的代码优化，仍然从内存中取值，稳定。

volatile 关键字影响编译器的结果，用 volatile 声明的变量表示该变量随时可能发生变化，
与该变量有关的运算，不再被编译器优化，以免出错

使用实例(场景)
    并行设备的硬件寄存器(状态寄存器)
    一个中断服务子程序会访问到的非自动变量
    多线程任务中被几个任务共享的变量

一个参数可以既是 const 又可以是 volatile 的吗？
    可以，只读的状态寄存器，它是 volatile 因为它可能被意想不到的改变，它是 const 因为程序不应该试图修改它

一个指针可以是 volatile 的吗
    可以，尽管这不常见，当一个中断服务子程序修改一个指向 Buffer 的指针时

    例子：
    int square(volatile int* ptr) {
        return *ptr * *ptr;

    }
下面是答案：
这段代码有点变态。这段代码的目的是用来返指针 *ptr 指向值的平方，但是，
由于 *ptr 指向一个 volatile 型参数，编译器将产生类似下面的代码：
int square(volatile int* ptr){
    int a, b;
    a = *ptr;
    b = *ptr;
    return a * b;
}

由于 *ptr 的值可能被意想不到地该变，因此 a 和 b 可能是不同的。
结果，这段代码可能返不是你所期望的平方值！正确的代码如下：
long square(volatile int* ptr) {
    int a;
    a = *ptr;
    return a * a;
}
